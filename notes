## process
ps axwwo args # printing whole command using 'ps' without truncating output

## sed

sed -ni '/23\:15\:01/,$p' <file-name> # inplace removal of all the lines before the first line that contains a match
sed -ni '/23\:17\:00/q;p' <file-name> # inplace removal of all the lines after the first line that contains a match

## networking
apt install net-tools # install netstat
netstat -tulpn | grep LISTEN # list which process is listening upon a port

## debugging
gdb <binary> <core-dump-file> # list full backtrace for all threads
    (gdb) thread apply all bt full
gdb <binary> <core-dump-file> -ex "thread apply all bt full" -ex "quit" > gdb.log
ulimit -c unlimited; ulimit -a; "/tmp/core.%e.%p" > /proc/sys/kernel/core_pattern # activating core dumps
(gdb) x/100bx &password.str[0] # print fisrt 100 bytes of password variable
(gdb) info file # checking if symbols were correctly loaded
gdbtui || gdb -tui || press C-x C-a after entering gdb # running gdb with terminal user interface
(gdb) symbol-file /path/to/your/file # loading symbols
(gdb) info break; (gdb) del <index> # remove breakpoint selected by index 
objdump --syms </path/to/your/file> # checking if binary has symbols
(gdb) set print elements 0 # pritn will show whole values of std::string without truncating
(gdb) print *(char**)0x7fffffffda88 # print string residing with given address
kill -s SIGINT `pidof gdb` # send interrupt signal to application being executed by gdb (simulating breakpoint)
gdb --args <binary-path> <binary-arg-1> <binary-arg-2> .... # debugging app with parameters
gdb; (gdb) attach <process_ID> # attach to running process
(gdb) set debug-file-directory <directories> # set the directories to search for separate debugging information (use path separator for multiple directories)
(gdb) show debug-file-directory # print debug file directories
Show the directories gdb searches for separate debugging information files
gdb) show debug-file-directory
  
## git
cd svn-repo; svn diff > /tmp/dummy.patch; cd git-repo; patch -p0 < /tmp/dummy.patch # import changes from svn
# print all remote branches
  $ git branch -a | grep remotes/*
  $ git branch -r 
git checkout <branch_name> # changing branch
git commit --amend -m "new commit message" # changing commit message
   
## subversion
svn checkout -r <revision-number> <repository-path> # checkout a specific revision

## regex
"#6263-3.19.0.1507 (sanity)" move into 3 groups by using "(\#\d+)-(\d+\.\d+\.\d+\.\d+) (\(sanity\))" pattern
# regex online page: https://regex101.com/
    => Full match	0-26	#6263-3.19.0.1507 (sanity)
    => Group 1.	0-5	    #6263
    => Group 2.	6-17	3.19.0.1507
    => Group 3.	18-26	(sanity)

## gnome
# gnome autostart script
    mkdir -p /home/$USER/.config/autostart/
    cat << EOF > /home/$USER/.config/autostart/startup.desktop
    [Desktop Entry]
    Type=Application
    Name=startup
    Exec=/P/trunk/Docker/installation/ubuntu-1804/afterReboot.sh
    Icon=/usr/share/seahorse/icons/hicolor/48x48/status/seahorse-sign.png
    Comment=NOP
    X-GNOME-Autostart-enabled=true
    EOF

## debian / ubuntu
apt list --installed # list all installed packages
apt-cache policy kubeadm # list all possible version of package (to be) installed
apt install -qy kubeadm=1.11.3-00 kubectl=1.11.3-00 kubelet=1.11.3-00 kubernetes-cni=0.6.0-00 # install packages with specified versions
apt-get install --only-upgrade <package-name> # upgrade only one package
apt-file search column | grep "\/column$" # finding package containing specific binary

## redhat / centos
yum provides */sql.h # list packages containing certain file

## docker
RUN echo "root:Docker!" | chpasswd          # change root user password
RUN echo "Docker!" | passwd --stdin root    # change root user password

## kubernetes
kubectl scale deploy <deployment-name> --replicas=20 # scale to 20 replicas
kubectl describe pods <pod-name> | grep -E "Ready\:|Restart Count" | sort | uniq -c # print Health status and restart count
kubectl logs -f <pod> # tail
kubectl cp <ns>/<pod>:<remote path> <local path>  # copy file from the k8s pod locally
# in case of tar error try to use relative location from Dockerfile WORKDIR perspective
# for example: WORKDIR=/tmp/
# if you want to copy file /tmp/my.log from the container you can just point to the file
#    kubectl cp <ns>/<pod>:my.log .

## postgres
SELECT * from pg_stats WHERE tablename LIKE '<prefix>%'; # statistics of tables
SELECT relname, relkind, reltuples, relpages FROM pg_class WHERE relname LIKE '<prefix>%'; # estimated row counts

## entertainment
youtube-dl --extract-audio --audio-format mp3 <video URL>

## ssh
sshfs -o uid=$UID,gid=$GROUPS remote-user@<ip address>:/path/to/remote /local/path # mounting ssh share with currecnt user id and group
fusermount -u /local/path # umount sshfs share

## rsync
# backup (__BACKUP__) with directory (__DIFFS__) where all deleted and modified files are stored (within subdirectory containing date)
(DATE=`date +%Y.%m.%d-%H:%M`; rsync -ab --delete --update --backup-dir=../__DIFFS__/$DATE --exclude __DIFFS__ src/ dest/__BACKUP__) 

## bash
while read LINE; do echo "$LINE"; done <file.txt # loop a file line by line

## mariadb / mysql
show status where `variable_name` = 'Threads_connected'; # number of currently open connections
show processlist; # list connections and their status

## gnome-terminal
gnome-terminal --working-directory=/P/trunk/Docker/deploy/scripts -- sh -c 'head deployment-create.sh; exec bash' # start bash session in given directory

## vim
w !sudo tee % # override readonly file using sudo without leaving editor

## ffmpeg
FILES=/i/vody/*
for f in $FILES; do
  echo "Processing $f file..."
  ffmpeg-20180325-5b31dd1-win64-static/bin/ffmpeg -i "$f" -vcodec h264 -acodec mp3 "$f.compressed.mp4"
done

## valgrind / massif / memcheck
# massif
    valgrind --tool=massif  --error-limit=no --stacks=yes --depth=200 --detailed-freq=1 --massif-out-file=mem.report <apph> <app-args>
    sudo apt install massif-visualizer
    massif-visualizer mem.report
# memcheck with log file
    valgrind --tool=memcheck --num-callers=20 --log-file=vg.log --leak-check=full --track-origins=yes --error-limit=no --show-reachable=yes <app> <app-args>
# memcheck with xml file consumed by valkyrie
    valgrind --tool=memcheck --num-callers=20 --xml=yes --xml-file=vg.xml --leak-check=full --track-origins=yes --error-limit=no --show-reachable=yes <app> <app-args>
    sudo apt-get install valkyrie
    valkyrie # click "Open Memcheck XML log" button and point to vg.xml file
# generate suppression file
valgrind --tool=memcheck --num-callers=40 --leak-check=full --track-origins=yes --log-file=supp.log --show-reachable=yes --gen-suppressions=all <app> <app-args>

# cmake
cmake -DCMAKE_BUILD_TYPE=Debug . # cmake call for debug build type

## wget
wget -c <url> # download and continue when interupted
wget -N <url> # download if the file is newer
wget -P <dir> <url> # download to <dir> and keep file name the same as it was on server
wget -O <path> <url> # donwload and save file in <path>

